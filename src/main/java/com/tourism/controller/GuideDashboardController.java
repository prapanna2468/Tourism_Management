package com.tourism.controller;

import com.tourism.model.User;
import com.tourism.model.Booking;
import com.tourism.util.FileManager;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.stage.Stage;
import java.time.LocalDate;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

public class GuideDashboardController {
    @FXML private Label welcomeLabel;
    @FXML private Label earningsLabel;
    @FXML private Label languagesLabel;
    @FXML private Label experienceLabel;
    @FXML private TableView<Booking> treksTable;
    @FXML private TableColumn<Booking, String> touristColumn;
    @FXML private TableColumn<Booking, String> trekColumn;
    @FXML private TableColumn<Booking, LocalDate> dateColumn;
    @FXML private TableColumn<Booking, String> difficultyColumn;
    @FXML private TextArea updatesArea;
    @FXML private Button logoutButton;
    @FXML private Button translateButton;
    
    private User currentUser;
    private boolean isNepali = false;
    private Map<String, String> translations = new HashMap<>();
    
    public void setCurrentUser(User user) {
        this.currentUser = user;
        updateWelcomeInfo();
        loadUpcomingTreks();
        loadImportantUpdates();
    }
    
    @FXML
    private void initialize() {
        initializeTranslations();
        setupTable();
    }
    
    private void initializeTranslations() {
        translations.put("Welcome,", "‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§õ,");
        translations.put("Earnings:", "‡§Ü‡§Æ‡•ç‡§¶‡§æ‡§®‡•Ä:");
        translations.put("Languages:", "‡§≠‡§æ‡§∑‡§æ‡§π‡§∞‡•Ç:");
        translations.put("Experience:", "‡§Ö‡§®‡•Å‡§≠‡§µ:");
        translations.put("Logout", "‡§≤‡§ó‡§Ü‡§â‡§ü");
        translations.put("Translate to Nepali", "‡§®‡•á‡§™‡§æ‡§≤‡•Ä‡§Æ‡§æ ‡§Ö‡§®‡•Å‡§µ‡§æ‡§¶");
        translations.put("Translate to English", "‡§Ö‡§Ç‡§ó‡•ç‡§∞‡•á‡§ú‡•Ä‡§Æ‡§æ ‡§Ö‡§®‡•Å‡§µ‡§æ‡§¶");
    }
    
    private void setupTable() {
        touristColumn.setCellValueFactory(new PropertyValueFactory<>("tourist"));
        trekColumn.setCellValueFactory(new PropertyValueFactory<>("attraction"));
        dateColumn.setCellValueFactory(new PropertyValueFactory<>("date"));
        difficultyColumn.setCellValueFactory(new PropertyValueFactory<>("difficulty"));
    }
    
    private void updateWelcomeInfo() {
        if (currentUser == null) return;
        
        welcomeLabel.setText("Welcome, " + currentUser.getFullName() + "!");
        
        // Calculate earnings (10-15% commission)
        List<Booking> allBookings = FileManager.getBookings();
        double totalEarnings = allBookings.stream()
            .filter(booking -> currentUser.getUsername().equals(booking.getGuide()))
            .mapToDouble(booking -> booking.getPrice() * 0.12) // 12% commission
            .sum();
        
        earningsLabel.setText("Earnings: $" + String.format("%.2f", totalEarnings));
        languagesLabel.setText("Languages: " + (currentUser.getLanguages() != null ? currentUser.getLanguages() : "English, Nepali"));
        experienceLabel.setText("Experience: " + (currentUser.getExperience() != null ? currentUser.getExperience() : "5 years"));
    }
    
    private void loadUpcomingTreks() {
        if (currentUser == null) return;
        
        List<Booking> allBookings = FileManager.getBookings();
        List<Booking> guideTreks = allBookings.stream()
            .filter(booking -> currentUser.getUsername().equals(booking.getGuide()))
            .filter(booking -> booking.getDate().isAfter(LocalDate.now()) || booking.getDate().isEqual(LocalDate.now()))
            .collect(Collectors.toList());
        
        ObservableList<Booking> trekList = FXCollections.observableArrayList(guideTreks);
        treksTable.setItems(trekList);
    }
    
    private void loadImportantUpdates() {
        StringBuilder updates = new StringBuilder();
        updates.append("üå®Ô∏è WEATHER ALERT: Heavy snow expected on Everest Base Camp trek from Dec 15-20. Please prepare accordingly.\n\n");
        updates.append("‚ö†Ô∏è SAFETY NOTICE: All high-altitude treks require mandatory health checkups. Please ensure tourists have proper documentation.\n\n");
        updates.append("üì¢ EMERGENCY CONTACT: In case of emergencies, contact Nepal Tourism Board at +977-1-4256909.\n\n");
        updates.append("üèîÔ∏è ROUTE UPDATE: Alternative route available for Annapurna Circuit due to landslide on main trail.\n\n");
        updates.append("üí∞ COMMISSION UPDATE: Guide commission rates have been updated to 12-15% based on trek difficulty.\n\n");
        updates.append("üéâ FESTIVAL SEASON: 20% discount period active for Dashain & Tihar (Aug-Oct). Expect higher booking volumes.");
        
        updatesArea.setText(updates.toString());
    }
    
    @FXML
    private void handleLogout() {
        try {
            FXMLLoader loader = new FXMLLoader(getClass().getResource("/fxml/login.fxml"));
            Scene scene = new Scene(loader.load(), 800, 600);
            Stage stage = (Stage) logoutButton.getScene().getWindow();
            stage.setScene(scene);
            stage.setTitle("Nepal Tourism Management System");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    @FXML
    private void handleTranslate() {
        isNepali = !isNepali;
        updateLanguage();
    }
    
    private void updateLanguage() {
        if (isNepali) {
            if (currentUser != null) {
                welcomeLabel.setText(translations.get("Welcome,") + " " + currentUser.getFullName() + "!");
                
                // Update earnings label
                String earningsText = earningsLabel.getText();
                String amount = earningsText.substring(earningsText.indexOf("$"));
                earningsLabel.setText(translations.get("Earnings:") + " " + amount);
                
                // Update other labels
                String languages = currentUser.getLanguages() != null ? currentUser.getLanguages() : "English, Nepali";
                languagesLabel.setText(translations.get("Languages:") + " " + languages);
                
                String experience = currentUser.getExperience() != null ? currentUser.getExperience() : "5 years";
                experienceLabel.setText(translations.get("Experience:") + " " + experience);
            }
            
            logoutButton.setText(translations.get("Logout"));
            translateButton.setText(translations.get("Translate to English"));
            
            // Translate updates
            String nepaliUpdates = "üå®Ô∏è ‡§Æ‡•å‡§∏‡§Æ ‡§ö‡•á‡§§‡§æ‡§µ‡§®‡•Ä: ‡§°‡§ø‡§∏‡•á‡§Æ‡•ç‡§¨‡§∞ ‡•ß‡•´-‡•®‡•¶ ‡§∏‡§Æ‡•ç‡§Æ ‡§è‡§≠‡§∞‡•á‡§∏‡•ç‡§ü ‡§¨‡•á‡§∏ ‡§ï‡•ç‡§Ø‡§æ‡§Æ‡•ç‡§™ ‡§ü‡•ç‡§∞‡•á‡§ï‡§Æ‡§æ ‡§≠‡§æ‡§∞‡•Ä ‡§π‡§ø‡§â‡§Å ‡§™‡§∞‡•ç‡§®‡•á ‡§Ö‡§™‡•á‡§ï‡•ç‡§∑‡§æ‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§§‡§¶‡§®‡•Å‡§∏‡§æ‡§∞ ‡§§‡§Ø‡§æ‡§∞‡•Ä ‡§ó‡§∞‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç‡•§\n\n" +
                                 "‚ö†Ô∏è ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§æ ‡§∏‡•Ç‡§ö‡§®‡§æ: ‡§∏‡§¨‡•à ‡§â‡§ö‡•ç‡§ö ‡§â‡§ö‡§æ‡§á‡§ï‡§æ ‡§ü‡•ç‡§∞‡•á‡§ï‡§π‡§∞‡•Ç‡§ï‡§æ ‡§≤‡§æ‡§ó‡§ø ‡§Ö‡§®‡§ø‡§µ‡§æ‡§∞‡•ç‡§Ø ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§ú‡§æ‡§Å‡§ö ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§™‡§∞‡•ç‡§Ø‡§ü‡§ï‡§π‡§∞‡•Ç‡§∏‡§Å‡§ó ‡§â‡§ö‡§ø‡§§ ‡§ï‡§æ‡§ó‡§ú‡§æ‡§§‡§π‡§∞‡•Ç ‡§õ‡§®‡•ç ‡§≠‡§®‡•Ä ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ó‡§∞‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç‡•§\n\n" +
                                 "üì¢ ‡§Ü‡§™‡§§‡§ï‡§æ‡§≤‡•Ä‡§® ‡§∏‡§Æ‡•ç‡§™‡§∞‡•ç‡§ï: ‡§Ü‡§™‡§§‡§ï‡§æ‡§≤‡•Ä‡§® ‡§Ö‡§µ‡§∏‡•ç‡§•‡§æ‡§Æ‡§æ, ‡§®‡•á‡§™‡§æ‡§≤ ‡§™‡§∞‡•ç‡§Ø‡§ü‡§® ‡§¨‡•ã‡§∞‡•ç‡§°‡§≤‡§æ‡§à +977-1-4256909 ‡§Æ‡§æ ‡§∏‡§Æ‡•ç‡§™‡§∞‡•ç‡§ï ‡§ó‡§∞‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç‡•§\n\n" +
                                 "üèîÔ∏è ‡§Æ‡§æ‡§∞‡•ç‡§ó ‡§Ö‡§™‡§°‡•á‡§ü: ‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§¨‡§æ‡§ü‡•ã‡§Æ‡§æ ‡§™‡§π‡§ø‡§∞‡•ã‡§ï‡§æ ‡§ï‡§æ‡§∞‡§£ ‡§Ö‡§®‡•ç‡§®‡§™‡•Ç‡§∞‡•ç‡§£ ‡§∏‡§∞‡•ç‡§ï‡§ø‡§ü‡§ï‡§æ ‡§≤‡§æ‡§ó‡§ø ‡§µ‡•à‡§ï‡§≤‡•ç‡§™‡§ø‡§ï ‡§Æ‡§æ‡§∞‡•ç‡§ó ‡§â‡§™‡§≤‡§¨‡•ç‡§ß‡•§\n\n" +
                                 "üí∞ ‡§ï‡§Æ‡§ø‡§∏‡§® ‡§Ö‡§™‡§°‡•á‡§ü: ‡§ü‡•ç‡§∞‡•á‡§ï‡§ï‡•ã ‡§ï‡§†‡§ø‡§®‡§æ‡§à‡§ï‡§æ ‡§Ü‡§ß‡§æ‡§∞‡§Æ‡§æ ‡§ó‡§æ‡§á‡§° ‡§ï‡§Æ‡§ø‡§∏‡§® ‡§¶‡§∞ ‡•ß‡•®-‡•ß‡•´% ‡§Æ‡§æ ‡§Ö‡§™‡§°‡•á‡§ü ‡§ó‡§∞‡§ø‡§è‡§ï‡•ã ‡§õ‡•§\n\n" +
                                 "üéâ ‡§ö‡§æ‡§°‡§™‡§∞‡•ç‡§µ‡§ï‡•ã ‡§Æ‡•å‡§∏‡§Æ: ‡§¶‡§∂‡•à‡§Ç ‡§∞ ‡§§‡§ø‡§π‡§æ‡§∞‡§ï‡§æ ‡§≤‡§æ‡§ó‡§ø ‡•®‡•¶% ‡§õ‡•Å‡§ü ‡§Ö‡§µ‡§ß‡§ø ‡§∏‡§ï‡•ç‡§∞‡§ø‡§Ø (‡§Ö‡§ó‡§∏‡•ç‡§§-‡§Ö‡§ï‡•ç‡§ü‡•ã‡§¨‡§∞)‡•§ ‡§¨‡§¢‡•Ä ‡§¨‡•Å‡§ï‡§ø‡§ô‡§ï‡•ã ‡§Ö‡§™‡•á‡§ï‡•ç‡§∑‡§æ ‡§ó‡§∞‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç‡•§";
            updatesArea.setText(nepaliUpdates);
        } else {
            if (currentUser != null) {
                welcomeLabel.setText("Welcome, " + currentUser.getFullName() + "!");
                updateWelcomeInfo(); // Reset to English
            }
            
            logoutButton.setText("Logout");
            translateButton.setText("Translate to Nepali");
            loadImportantUpdates(); // Reset to English updates
        }
    }
}
